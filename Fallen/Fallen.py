# -*- coding: utf-8 -*-
"""SFFT-V1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVqXZVSKVmKerb_OmbFqgcozeC6oNwxI

#Fallen Financial Tools es una recopilacion de distintas herramientas para el analisis de activos, enfocadas en el mercado Argentino.
"""

import pandas as pd
from datetime import datetime
import datetime
from pytz import timezone
import requests
import re
import json
import numpy as np 
import io

class yahoo:
  def get_history(ticker,date_start,date_end):
    newyork_tz = timezone('America/New_York')
    var = date_start.split("-")
    var = list(map(int, var))
    p1 = str(int(newyork_tz.localize(datetime.datetime(var[0],var[1],var[2], 8, 0, 0)).timestamp()))

    var = date_end.split("-")
    var = list(map(int, var))
    p2 = str(int(newyork_tz.localize(datetime.datetime(var[0],var[1],var[2], 8, 0, 0)).timestamp()))

    url = f"https://query1.finance.yahoo.com/v7/finance/download/{ticker}?period1={p1}&period2={p2}&interval=1d&events=history&includeAdjustedClose=true"
    df = pd.read_csv(url)
    return df



class ambito:
  def dolar_blue(start_date,end_date):
    url = "https://mercados.ambito.com//dolar/informal/historico-general/"

    start_date = start_date.split("-")
    start_date = list(map(int, start_date))
    start_date_str = str(start_date[2])+"-"+str(start_date[1])+"-"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(map(int, end_date))
    end_date_str = str(end_date[2])+"-"+str(end_date[1])+"-"+str(end_date[0])
    req = requests.get(url+start_date_str+'/'+end_date_str)
    df = req.json()
    df=pd.DataFrame(df)
    df.columns=df.loc[0]
    df = df.drop(labels=0, axis=0)
    df['Compra'] = df['Compra'].str.replace(",", ".").astype(float)
    df['Venta'] = df['Venta'].str.replace(",", ".").astype(float)
    df.Fecha=pd.to_datetime(df.Fecha,format='%d/%m/%Y')
    df.sort_values(by=['Fecha'], inplace=True)
    df = df.drop_duplicates("Fecha")
    df=df.reset_index()
    df=df.drop(['index'],axis=1)
    return df

  def dolar_oficial(start_date,end_date):
    url = "https://mercados.ambito.com//dolar/oficial/historico-general/"

    start_date = start_date.split("-")
    start_date = list(map(int, start_date))
    start_date_str = str(start_date[2])+"-"+str(start_date[1])+"-"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(map(int, end_date))
    end_date_str = str(end_date[2])+"-"+str(end_date[1])+"-"+str(end_date[0])
    req = requests.get(url+start_date_str+'/'+end_date_str)
    df = req.json()
    df=pd.DataFrame(df)
    df.columns=df.loc[0]
    df = df.drop(labels=0, axis=0)
    df['Compra'] = df['Compra'].str.replace(",", ".").astype(float)
    df['Venta'] = df['Venta'].str.replace(",", ".").astype(float)
    df.Fecha=pd.to_datetime(df.Fecha,format='%d/%m/%Y')
    df.sort_values(by=['Fecha'], inplace=True)
    df = df.drop_duplicates("Fecha")
    df=df.reset_index()
    df=df.drop(['index'],axis=1)
    return df

  def dolar_solidario(start_date,end_date):
    url= "https://mercados.ambito.com//dolarturista/historico-general/"

    start_date = start_date.split("-")
    start_date = list(map(int, start_date))
    start_date_str = str(start_date[2])+"-"+str(start_date[1])+"-"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(map(int, end_date))
    end_date_str = str(end_date[2])+"-"+str(end_date[1])+"-"+str(end_date[0])
    req = requests.get(url+start_date_str+'/'+end_date_str)
    df = req.json()
    df=pd.DataFrame(df)
    df.columns=df.loc[0]
    df = df.drop(labels=0, axis=0)
    df['Venta'] = df['Venta'].str.replace(",", ".").astype(float)
    df.Fecha=pd.to_datetime(df.Fecha,format='%d/%m/%Y')
    df.sort_values(by=['Fecha'], inplace=True)
    df = df.drop_duplicates("Fecha")
    df=df.reset_index()
    df=df.drop(['index'],axis=1)
    return df


class rava:
  def get_history(ticker,start_date,end_date):
    s = requests.Session()

    def strbetw(text, left, right):
      match = re.search( left + '(.*?)' + right, text)
      if match:  
        return match.group(1)
      return ''

    url = "https://www.rava.com"
    headers = {
        "Host" : "www.rava.com",
        "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0",
        "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language" : "en-US,en;q=0.5",
        "Accept-Encoding" : "gzip, deflate, br",    
        "DNT" : "1",
        "Connection" : "keep-alive",      
        "Upgrade-Insecure-Requests" : "1",
        "Sec-Fetch-Dest" : "document",
        "Sec-Fetch-Mode" : "navigate",
        "Sec-Fetch-Site" : "none",
        "Sec-Fetch-User" : "?1"
        }

    response = s.get(url = url, headers = headers)
    status = response.status_code
    if status != 200:
      print("login status", status)  
      exit()

    access_token = strbetw(response.text, ":access_token=\"\'", "\'\"")

    url = "https://clasico.rava.com/lib/restapi/v3/publico/cotizaciones/historicos"

    data = {
      "access_token": access_token, # - Parece que dura 30 minutos 
      "especie": ticker, #Ticker
      "fecha_inicio": start_date, #Para que traiga todo
      "fecha_fin": end_date#Para que traiga todo
    }
    headers = {
        "Host" : "clasico.rava.com",
        "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0",
        "Accept" : "*/*",
        "Accept-Language" : "en-US,en;q=0.5",
        "Accept-Encoding" : "gzip, deflate",
        "Content-Type" : "application/x-www-form-urlencoded",
        "Origin" : "https://datos.rava.com",
        "DNT" : "1",
        "Connection" : "keep-alive",
        "Referer" : "https://datos.rava.com/",    
        "Sec-Fetch-Dest" : "empty",
        "Sec-Fetch-Mode" : "cors",
        "Sec-Fetch-Site" : "same-site"    
    }
    response = s.post(url = url, headers = headers, data = data)
    status = response.status_code
    if status != 200:
      print("form status", status)
      exit()
    quots=(pd.DataFrame(json.loads(response.text)['body']))
    quots.rename({'cierre': 'close','fecha':'date','apertura':'open','maximo':'high','minimo':'low','volumen':'volume'}, axis=1, inplace=True)
    quots=quots.drop(['especie'],axis=1)
    return quots

class macrotrends:
  def get_symbols():
      url = 'https://www.macrotrends.net/assets/php/ticker_search_list.php'
      response = requests.get(url)

      symbols = pd.DataFrame(response.json())
      symbols.index = symbols['s'].str.split('/').str[0]
      symbols['name'] = symbols['s'].str.split('/').str[1]
      return symbols

  def incomes(symbol, freq='Q'):
      symbols = macrotrends.get_symbols()

      url = f'https://www.macrotrends.net/stocks/charts/{symbol}/{symbols["name"]}/income-statement?freq={freq}'
      response = requests.get(url)
      content = response.content.decode('utf8','ignore')
      info = content.split('var originalData = ')[1].split(';\r\n\r\n\r\n')[0]
      if not info == 'null':
        data = pd.DataFrame(json.loads(info))
        data['field_name'] = data['field_name'].str.split('>').str[1].str.split('<').str[0]
        data = data.set_index('field_name').iloc[:,1:]
        data = data.replace('', 0).astype(float).replace(0, pd.NA).dropna(how='all', axis=0).T
        data.index = pd.to_datetime(data.index, format='%Y-%m-%d')
        data.columns.name = None
      else:
        print('SÃ­mbolo sin informaciÃ³n disponible')
        data= None
      return data

  def history(symbol):
    url = f'https://www.macrotrends.net/assets/php/stock_data_download.php?s=61b72cbe23226&t={symbol}'
    response = requests.get(url)
    content = response.content.decode('ascii')
    csv_string = content.split('displayed on a web page."\n\n\n')[1]
    data = pd.read_csv(io.StringIO(csv_string), index_col=0)
    data.index = pd.to_datetime(data.index, format='%Y-%m-%d')
    return data

class cohen:
  def stocks(ticker,start_date,end_date):
    s = requests.Session()
    df= s.get(url="https://www.cohen.com.ar/")
    url = 'https://www.cohen.com.ar/Financial//ListCotizacion'

    data = {"grupo": "ACCIONES", "especieTipo": "", "campoOrden": "SIMBOLO", "sentidoOrden": "ASC"}

    headers = {"Content-Type" : "application/x-www-form-urlencoded; charset=UTF-8"}

    data = s.post(url=url, headers=headers, data=data).json()

    df = pd.DataFrame(data["CotizacionList"])

    for i in range(len(df)):
      var=df.at[i,"Simbolo"].split("-")
      var = list(map(str, var))
      df.at[i,"Simbolo"]=var[0]

    idEspecie=df.set_index("Simbolo").at[ticker+" ","IdEspecie"]


    start_date = start_date.split("-")
    start_date = list(start_date)
    start_date_str = str(start_date[2])+"/"+str(start_date[1])+"/"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(end_date)
    end_date_str = str(end_date[2])+"/"+str(end_date[1])+"/"+str(end_date[0])
    
    data = { "idEspecie": idEspecie, "fechaDesde": start_date_str, 'fechaHasta': end_date_str}
    url = "https://www.cohen.com.ar/Financial/GetTablaCotizacionesHistoricas"

    data = s.post(url=url, headers=headers, data=data)
    df=pd.DataFrame(data.json())

    df=df[["FechaString","PrecioUltimo","PrecioApertura","PrecioMaximo","PrecioMinimo","VolumenNominal"]]
    df.columns=["date","last","open","high","low","volume"]
    df.date=df.date.astype(str)
    df.date=pd.to_datetime(df.date, format='%d/%m/%Y')
    return df

  def cedears(ticker,start_date,end_date):
    s = requests.Session()
    df= s.get(url="https://www.cohen.com.ar/")
    url = 'https://www.cohen.com.ar/Financial//ListCotizacion'

    data = {"grupo": "CEDEARS", "especieTipo": "", "campoOrden": "SIMBOLO", "sentidoOrden": "ASC"}

    headers = {"Content-Type" : "application/x-www-form-urlencoded; charset=UTF-8"}

    data = s.post(url=url, headers=headers, data=data).json()

    df = pd.DataFrame(data["CotizacionList"])

    for i in range(len(df)):
      var=df.at[i,"Simbolo"].split("-")
      var = list(map(str, var))
      df.at[i,"Simbolo"]=var[0]

    idEspecie=df.set_index("Simbolo").at[ticker+" ","IdEspecie"]


    start_date = start_date.split("-")
    start_date = list(start_date)
    start_date_str = str(start_date[2])+"/"+str(start_date[1])+"/"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(end_date)
    end_date_str = str(end_date[2])+"/"+str(end_date[1])+"/"+str(end_date[0])
    
    data = { "idEspecie": idEspecie, "fechaDesde": start_date_str, 'fechaHasta': end_date_str}
    url = "https://www.cohen.com.ar/Financial/GetTablaCotizacionesHistoricas"

    data = s.post(url=url, headers=headers, data=data)
    df=pd.DataFrame(data.json())

    df=df[["FechaString","PrecioUltimo","PrecioApertura","PrecioMaximo","PrecioMinimo","VolumenNominal"]]
    df.columns=["date","last","open","high","low","volume"]
    df.date=df.date.astype(str)
    df.date=pd.to_datetime(df.date, format='%d/%m/%Y')
    return df

  def fixed_income(ticker,start_date,end_date):
    s = requests.Session()
    df= s.get(url="https://www.cohen.com.ar/")
    url = 'https://www.cohen.com.ar/Financial//ListCotizacion'

    data = {"grupo": "RENTAFIJA", "especieTipo": "", "campoOrden": "SIMBOLO", "sentidoOrden": "ASC"}

    headers = {"Content-Type" : "application/x-www-form-urlencoded; charset=UTF-8"}

    data = s.post(url=url, headers=headers, data=data).json()

    df = pd.DataFrame(data["CotizacionList"])

    idEspecie=df.set_index("EspecieAgrupacion").loc[ticker,"IdEspecie"]
    
    start_date = start_date.split("-")
    start_date = list(start_date)
    start_date_str = str(start_date[2])+"/"+str(start_date[1])+"/"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(end_date)
    end_date_str = str(end_date[2])+"/"+str(end_date[1])+"/"+str(end_date[0])
    
    data = { "idEspecie": idEspecie, "fechaDesde": start_date_str, 'fechaHasta': end_date_str}
    url = "https://www.cohen.com.ar/Financial/GetTablaCotizacionesHistoricas"

    data = s.post(url=url, headers=headers, data=data)
    df=pd.DataFrame(data.json())

    df=df[["FechaString","PrecioUltimo","PrecioApertura","PrecioMaximo","PrecioMinimo","VolumenNominal"]]
    df.columns=["date","last","open","high","low","volume"]
    df.date=df.date.astype(str)
    df.date=pd.to_datetime(df.date, format='%d/%m/%Y')

    return df

  def options(ticker,start_date,end_date):
    s = requests.Session()
    df= s.get(url="https://www.cohen.com.ar/")
    url = 'https://www.cohen.com.ar/Financial//ListCotizacion'

    data = {"grupo": "OPCIONES", "especieTipo": "", "campoOrden": "SIMBOLO", "sentidoOrden": "ASC"}

    headers = {"Content-Type" : "application/x-www-form-urlencoded; charset=UTF-8"}

    data = s.post(url=url, headers=headers, data=data).json()

    df = pd.DataFrame(data["CotizacionList"])

    idEspecie=df.set_index("EspecieAgrupacion").loc[ticker,"IdEspecie"]
    
    start_date = start_date.split("-")
    start_date = list(start_date)
    start_date_str = str(start_date[2])+"/"+str(start_date[1])+"/"+str(start_date[0])
    end_date = end_date.split("-")
    end_date = list(end_date)
    end_date_str = str(end_date[2])+"/"+str(end_date[1])+"/"+str(end_date[0])
    data = { "idEspecie": idEspecie, "fechaDesde": start_date_str, 'fechaHasta': end_date_str}
    url = "https://www.cohen.com.ar/Financial/GetTablaCotizacionesHistoricas"

    data = s.post(url=url, headers=headers, data=data)
    df=pd.DataFrame(data.json())

    df=df[["FechaString","PrecioUltimo","PrecioApertura","PrecioMaximo","PrecioMinimo","VolumenNominal"]]
    df.columns=["date","last","open","high","low","volume"]
    df.date=df.date.astype(str)
    df.date=pd.to_datetime(df.date, format='%d/%m/%Y')

    return df